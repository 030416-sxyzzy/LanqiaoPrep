前缀和概念
前缀和非常简单，简单到一句话就能说清楚：
一个长度为n的数组a[1] ~ a[n]，前缀和sum[i]等于a[1] ~ a[i]的和：sum[i] = a[1] + a[2] + ... + a[i] 

差分
差分的概念
与一维数组a[]对应的一维差分数组d[]的定义：d[k] = a[k] - a[k-1]即差分数组d[]是原数组a[]的相邻元素的差。
根据d[]的定义，可以反过来推出：a[k] = d[1] + d[2] + ... + d[k]即a[]是d[]的前缀和，所以“差分是前缀和的逆运算”。
把区间[L, R]内每个元素a[]加上v，只需要把对应的d[]做以下操作：
（1）把d[L]加上v：  d[L] += v
（2）把d[R+1]减去v：d[R+1] -= v利用d[]，能精确地实现只修改区间内元素的目的，而不会修改区间外的a[]值。
根据前缀和a[x] = d[1] + d[2] + ... + d[x]，有：
（1）1 ≤ x < L，前缀和a[x]不变；
（2）L ≤ x ≤ R，前缀和a[x]增加了v；
（3）R < x ≤ N，前缀和a[x]不变，因为被d[R+1]中减去的v抵消了。
每次操作只需要修改区间[L, R]的两个端点的d[]值，复杂度是O(1)的。
例如
假设数组 A = [0, 0, 0, 0, 0]，我们希望对区间 [1, 3] 进行操作，每个元素加上 5。使用差分数组的过程如下：

初始状态：A = [0, 0, 0, 0, 0]
差分数组 d = [0, 0, 0, 0, 0, 0]
第一次操作：对区间 ([1, 3]) 每个元素加上 5。
根据差分数组的操作：
在 (d[1]) 上加 5：d[1] += 5 -> d = [0, 5, 0, 0, 0, 0] 
在 (d[4]) 上减 5：d[4] -= 5 ->d = [0, 5, 0, 0, -5, 0] 
计算最终的数组 (A)：
现在，我们可以通过差分数组 (d) 来计算最终的数组 (A)：
A[1] = d[1] = 5
A[2] = d[1] + d[2] = 5 + 0 = 5
A[3] = d[1] + d[2] + d[3] = 5 + 0 + 0 = 5
A[4] = d[1] + d[2] + d[3] + d[4] = 5 + 0 + 0 - 5 = 0
A[5] = d[1] + d[2] + d[3] + d[4] + d[5] = 5 + 0 + 0 - 5 + 0 = 0
最终，数组 (A) 变成了：A = [5, 5, 5, 0, 0]
